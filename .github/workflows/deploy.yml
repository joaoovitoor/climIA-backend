name: Deploy to Lambda

on:
  push:
    branches: [main]

env:
  FUNCTION_NAME: climia-api
  REGION: us-east-1
  API_NAME: ClimIA API

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build for Lambda
        run: |
          echo "üî® Building for Lambda..."
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o bootstrap cmd/lambda/main.go
          echo "üì¶ Creating ZIP file..."
          zip function.zip bootstrap
          echo "üìä ZIP size: $(du -h function.zip | cut -f1)"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-function
          path: function.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-function
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Deploy Lambda Function
        run: |
          if aws lambda get-function --function-name ${{ env.FUNCTION_NAME }} --region ${{ env.REGION }} 2>/dev/null; then
            echo "üîÑ Atualizando fun√ß√£o Lambda..."
            aws lambda update-function-code \
              --function-name ${{ env.FUNCTION_NAME }} \
              --zip-file fileb://function.zip \
              --region ${{ env.REGION }}
            
            echo "‚è≥ Aguardando fun√ß√£o ficar ativa..."
            aws lambda wait function-active \
              --function-name ${{ env.FUNCTION_NAME }} \
              --region ${{ env.REGION }}
            
            echo "‚úÖ C√≥digo atualizado com sucesso!"
            
            echo "‚è≥ Aguardando fun√ß√£o ficar atualizada antes de configurar..."
            aws lambda wait function-updated \
              --function-name ${{ env.FUNCTION_NAME }} \
              --region ${{ env.REGION }}
            
            echo "‚öôÔ∏è Atualizando configura√ß√£o..."
            aws lambda update-function-configuration \
              --function-name ${{ env.FUNCTION_NAME }} \
              --environment Variables="{DB_CONNECTION_STRING=\"${{ secrets.DB_CONNECTION_STRING }}\"}" \
              --region ${{ env.REGION }}
          else
            echo "üÜï Criando fun√ß√£o Lambda..."
            aws lambda create-function \
              --function-name ${{ env.FUNCTION_NAME }} \
              --runtime provided.al2 \
              --role ${{ secrets.LAMBDA_ROLE_ARN }} \
              --handler bootstrap \
              --zip-file fileb://function.zip \
              --region ${{ env.REGION }} \
              --timeout 30 \
              --memory-size 512 \
              --environment Variables="{DB_CONNECTION_STRING=\"${{ secrets.DB_CONNECTION_STRING }}\"}"
            
            echo "‚è≥ Aguardando fun√ß√£o ficar ativa..."
            aws lambda wait function-active \
              --function-name ${{ env.FUNCTION_NAME }} \
              --region ${{ env.REGION }}
            
            echo "‚úÖ Fun√ß√£o criada com sucesso!"
          fi

      - name: Setup API Gateway
        run: |
          API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='${{ env.API_NAME }}'].id" \
            --output text)

          if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
            echo "üÜï Criando API Gateway..."
            API_ID=$(aws apigateway create-rest-api \
              --name "${{ env.API_NAME }}" \
              --description "API de previs√£o meteorol√≥gica" \
              --endpoint-configuration types=REGIONAL \
              --query 'id' --output text)
            echo "API criada com ID: $API_ID"
          else
            echo "üîÑ Usando API existente: $API_ID"
          fi

          echo "API_ID=$API_ID" >> $GITHUB_ENV

      - name: Configure API Gateway Resources
        run: |
          ROOT_ID=$(aws apigateway get-resources \
            --rest-api-id $API_ID \
            --query 'items[?path==`/`].id' \
            --output text)

          echo "Root resource ID: $ROOT_ID"

          PROXY_ID=$(aws apigateway get-resources \
            --rest-api-id $API_ID \
            --query 'items[?pathPart==`{proxy+}`].id' \
            --output text)

          if [ -z "$PROXY_ID" ] || [ "$PROXY_ID" = "None" ]; then
            echo "üÜï Criando proxy resource..."
            PROXY_ID=$(aws apigateway create-resource \
              --rest-api-id $API_ID \
              --parent-id $ROOT_ID \
              --path-part "{proxy+}" \
              --query 'id' --output text)
            echo "Proxy resource criado: $PROXY_ID"
          else
            echo "üîÑ Usando proxy resource existente: $PROXY_ID"
          fi

          echo "üîß Configurando m√©todo ANY para root..."
          if ! aws apigateway get-method --rest-api-id $API_ID --resource-id $ROOT_ID --http-method ANY 2>/dev/null; then
            aws apigateway put-method \
              --rest-api-id $API_ID \
              --resource-id $ROOT_ID \
              --http-method ANY \
              --authorization-type NONE
            echo "‚úÖ M√©todo ANY criado para root"
          else
            echo "‚úÖ M√©todo ANY j√° existe para root"
          fi

          echo "üîß Configurando query parameters para root..."
          aws apigateway update-method \
            --rest-api-id $API_ID \
            --resource-id $ROOT_ID \
            --http-method ANY \
            --patch-operations \
              'op=add,path=/requestParameters/method.request.querystring.cidade,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.estado,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.data,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.datainicio,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.datafim,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.ANY,value=false'

          echo "üîß Configurando integra√ß√£o para root..."
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $ROOT_ID \
            --http-method ANY \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:${{ env.REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ env.FUNCTION_NAME }}/invocations"

          echo "üîß Configurando m√©todo ANY para proxy..."
          if ! aws apigateway get-method --rest-api-id $API_ID --resource-id $PROXY_ID --http-method ANY 2>/dev/null; then
            aws apigateway put-method \
              --rest-api-id $API_ID \
              --resource-id $PROXY_ID \
              --http-method ANY \
              --authorization-type NONE
            echo "‚úÖ M√©todo ANY criado para proxy"
          else
            echo "‚úÖ M√©todo ANY j√° existe para proxy"
          fi

          echo "üîß Configurando query parameters para proxy..."
          aws apigateway update-method \
            --rest-api-id $API_ID \
            --resource-id $PROXY_ID \
            --http-method ANY \
            --patch-operations \
              'op=add,path=/requestParameters/method.request.querystring.cidade,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.estado,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.data,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.datainicio,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.datafim,value=false' \
              'op=add,path=/requestParameters/method.request.querystring.ANY,value=false'

          echo "üîß Configurando integra√ß√£o para proxy..."
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $PROXY_ID \
            --http-method ANY \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:${{ env.REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ env.FUNCTION_NAME }}/invocations"

          echo "‚úÖ Configura√ß√£o do API Gateway conclu√≠da!"

      - name: Grant API Gateway Permission
        run: |
          STATEMENT_ID="apigateway-invoke-lambda-$API_ID"

          aws lambda remove-permission \
            --function-name ${{ env.FUNCTION_NAME }} \
            --statement-id $STATEMENT_ID \
            --region ${{ env.REGION }} 2>/dev/null || true

          echo "üîê Adicionando permiss√£o para API Gateway..."
          aws lambda add-permission \
            --function-name ${{ env.FUNCTION_NAME }} \
            --statement-id $STATEMENT_ID \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:${{ env.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:$API_ID/*/*" \
            --region ${{ env.REGION }}

      - name: Deploy API
        run: |
          echo "üöÄ Fazendo deploy da API..."
          DEPLOYMENT_ID=$(aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod \
            --description "Deploy via GitHub Actions - $(date)" \
            --query 'id' --output text)

          echo "‚è≥ Aguardando deploy ficar dispon√≠vel..."
          aws apigateway get-deployment \
            --rest-api-id $API_ID \
            --deployment-id $DEPLOYMENT_ID

          echo "‚úÖ Deploy conclu√≠do! Deployment ID: $DEPLOYMENT_ID"

      - name: Display URLs
        run: |
          echo "üéâ Deploy conclu√≠do com sucesso!"
          echo ""
          echo "üìä Informa√ß√µes do deploy:"
          echo "  ‚Ä¢ Function: ${{ env.FUNCTION_NAME }}"
          echo "  ‚Ä¢ API ID: $API_ID"
          echo "  ‚Ä¢ Region: ${{ env.REGION }}"
          echo ""
          echo "üåê URLs dispon√≠veis:"
          echo "  ‚Ä¢ Root: https://$API_ID.execute-api.${{ env.REGION }}.amazonaws.com/prod/"
          echo "  ‚Ä¢ Proxy: https://$API_ID.execute-api.${{ env.REGION }}.amazonaws.com/prod/{qualquer-path}"
